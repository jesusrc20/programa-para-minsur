# -*- coding: utf-8 -*-
"""TrabajoFinal 1.0.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1n9qlL37J-n12poeqpcvLQFH3Wg9svBHG
"""

# LOGIN DNI y Registro --
# TOTAL DE PROYECTOS POR EMPRESA (Totalidad DashBoard) ---
# LLENAR ARREGLO
# GITHUB ---
# .-.-.--.EXTRA.-.--.-.-..-.
# ALGORITMO BUSQUEDA Y ORDEN
# ---------------------------
# El presente trabajo es el resultado del trabajo investigativo y resolutivo en conjunto de los estudiantes del Grupo 1


class Unidad:
  def __init__(self, c_name, c_dir, p_name, p_dir, p_cost, m_name, m_num): #constructor
    self.c_name = c_name
    self.c_dir = c_dir
    self.p_name = p_name
    self.p_dir = p_dir
    self.p_cost = p_cost
    self.m_name = m_name
    self.m_num = m_num

def ingresar_cuenta(users_lists, passwords_lists):
    verificacion = False

    print("------------------------------------")
    print("Escriba sus respectivas credenciales")
    print("------------------------------------")

    while verificacion == False:
      id = int(input("DNI: "))
      password = str(input("Contraseña: "))

      for i in range(len(users_lists)):
        print(i)
        print(id)
        print(password)
        print(users_lists[i])
        print(passwords_lists[i])
        if id == users_lists[i] and password == passwords_lists[i]:
          verificacion = True

      if verificacion == True:
        print("--------------------------------------")
        print("Verificación completa, usuario válido")
        print("--------------------------------------")
      else:
        print("--------------------------------------")
        print("Usuario no registrado, intente de nuevo")
        print("--------------------------------------")

def crear_cuenta(users_lists, passwords_lists):    #Podríamos agregar una base de datos con el DNI de los trabajadores en esta parte
    id = 100000000
    while id > 99999999 or id < 9999999:           #Se verifica que el DNI sea de 8 dígitos
      print("------------------------------------")
      print("   Ingrese los datos a registrar")
      print("------------------------------------")
      id = int(input("DNI: "))
      password = str(input("Contraseña: "))

      if id > 99999999 or id < 9999999:
        print("------------------------------------")
        print(" DNI NO VALIDO. INTENTE NUEVAMENTE")
        print("------------------------------------")

    users_lists.append(id)
    passwords_lists.append(password)

    print("------------------------------------")
    print("  Datos registrados correctamente")
    print("------------------------------------")


def pantalla_login(): #Lo primero en mostrarse
    usuarios_lista = [12345678]
    contrasenas_lista = ["12345"]

    op = 0

    while op != 1:

      print("¿Tiene una cuenta en la plataforma?")
      print("------------------------------------")
      print("------------------------------------")
      print("1. Sí, tengo una cuenta registrada.")
      print("2. No, crear una una nueva cuenta.")
      print("------------------------------------")

      op = int(input())

      if op == 2:
        crear_cuenta(usuarios_lista, contrasenas_lista)

    ingresar_cuenta(usuarios_lista, contrasenas_lista)

def calculo_mineral(lista, i): #Se realiza el cálculo del mineral y se devuelve la cantidad de dinero esperado segun el valor del mercado actual
    mineral = lista[i].m_name
    multiplicador = 0

    #Todos se encuentran en relacion al kilogramos, fuentes https://www.exchange-rates.org
    if mineral == "Cobre":
      multiplicador = 39.76
    if mineral == "Oro":
      multiplicador = 159538.8
    if mineral == "Plata":
      multiplicador = 4404

    if mineral == "prueba_admin":    # Simple prueba para comprobar que la variable funcione correctamente
      multiplicador = 2

    return (lista[i].m_num * multiplicador)

def imprimir_lista(lista):#Se imprime la lista y se obtiene el cálculo de ganancia

  for i in range(0, len(lista)):
    print("------------------------------------------------")
    print(" EMPRESA: ", lista[i].c_name)
    print("------------------------------------------------")
    print(" Dirección de la empresa: ", lista[i].c_dir)
    print(" Nombre del proyecto: ", lista[i].p_name)
    print(" Locación del proyecto: ", lista[i].p_dir)
    print(" Costo del proyecto: ", lista[i].p_cost, " Nuevos soles")
    print(" Mineral a extraer: ", lista[i].m_name)
    print(" Cantidad del mineral: ", lista[i].m_num, " Kg")
    print(" Expectativa de ganancia calculada:", calculo_mineral(lista, i), " Nuevos soles")
    print("------------------------------------------------")

def acceso_unidades(lista):
  print("-----------------------------------------------------------")
  print("A continuación las unidades con sus respectivas empresas")
  print("----------------------------------------------------------")
  imprimir_lista(lista)

def agregar_unidad():
  print("---------------------------------")
  print("Complete las siguientes preguntas")
  print("---------------------------------")
  print("¿Cual es el nombre de la empresa?")
  company_name = str(input())
  print("¿Cual es la direccion de la empresa?")
  company_dir = str(input())
  print("¿Cual es el nombre del proyecto?")
  project_name = str(input())
  print("¿En que locación se hace el proyecto?")
  project_dir = str(input())
  print("¿Cual es el costo del proyecto? (Respuesta en nuevos soles)")
  project_cost = int(input())
  print("¿Cual es el mineral a obtener? (Plata, Cobre u Oro)")
  mine_name = str(input())
  print("¿Cuanto mineral se desea extraer? (Respuesta en kilogramos)")
  mine_num = int(input())

  unidad_x = Unidad(company_name, company_dir, project_name, project_dir, project_cost, mine_name, mine_num)
  print("---------------------------------")
  print("       Unidad guardada")
  return unidad_x


def menu_ingreso():

  unidad_ejemplo_01 = Unidad("AyacuchoMinas", "Ayacucho", "Extracción Colpa", "Colpa", 2000000, "Oro", 10000)
  unidad_ejemplo_02 = Unidad("Minery Inc.", "New Mexico", "Project White", "Ancash", 2000000, "Plata", 500000)



  lista_unidades = [unidad_ejemplo_01, unidad_ejemplo_02] #Arreglo de trabajos/proyectos/unidades. Arreglo de objetos

  lista_usuarios_propietarios = [lista_unidades] #Arreglo de arreglos. Esta parte será usada para poder guardar las empresas y proyectos en cada usuario separado

  num_opcion = 0

  while num_opcion != 3:
    print("--------------------------------") #Posible bucle while num_opcion != 3
    print("        Menu_de_Ingreso")
    print("--------------------------------")
    print("1. Acceso e informe de unidades")
    print("2. Agregar una unidad (proyecto)")
    print("3. Salir")
    print("--------------------------------")

    num_opcion = int(input("Seleccione un numero: "))
    if num_opcion == 1:
      acceso_unidades(lista_unidades)

    if num_opcion == 2:
      lista_unidades.append(agregar_unidad())

  print("Progama finalizado.¡Vuelva pronto!")

def main():

  pantalla_login()
  menu_ingreso()

#Se supone que el menu principal debería ser un bucle que sale cuando se elige 3

main()
